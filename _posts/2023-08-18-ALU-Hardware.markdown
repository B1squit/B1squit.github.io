---
layout: post
title: "Implementing the ALU in hardware"
date: 2023-08-17 15:30 +0100
categorys: CPU
---
While I am finishing off learning the ins and outs of VHDL, I went ahead and implemented the ALU in hardware with the previously mentioned 74HC series ICs.

This began with the implementation of the circuit on which this was all based, the full binary adder, though even the first step did not go without issues. The first issue I stumbled into was using the wrong chip in the wrong place. Where there was supposed to be a 74HC02 (Quad NOR) there was accidentaly placed a 74HC04 (Hex NOT). This resulted quite obviously in the logic not working correctly when storing the carry bit for sequential operation, resulting in floating states. Debugging this took a bit longer than it should have, as first all the connections were checked before the label on the chip itself. Once the misplaced chip was found it was quickly replaced, but not without issue. In all the rush, I placed the new 74HC02 chip in upside down while the whole circuit was disconnected and then reconnected it. Yet again the logic did not work, resulting in half lit flickering on the output LEDs which instantly showed my error, and for the second time this year experienced how hot these ICs can get if Vcc and GND are connected incorrectly. Finally however, after another correction, the main portion of the ALU was finished resulting in the breadboard circuit below (input switches and output LEDs were disconnected for further development).
![fba](/assets/imgs/8-bit-cpu/full-binary-adder-hardware.png)

As shown in the image, there is some temporary colour coding at play to help with debugging. White cables represent inputs into the system, yellow an input into an inversion (since the ICs used by default invert at their input), blue a signal being carried forward, orange the carry bit and red and black being Vcc and GND respectively. The part of the circuit that did not utilise the colouring correctly is in the top right, where the inputs of the gates are tied to their respective voltages as recommended in the datasheet for the D type latch.

The next part of the circuit to be added was the implementation of both the Carry enable and Logic select control. This involved the addition of a few new logic gates as featured and explained in the previous blog post together with a 74HC04 IC. Similarly to the first circuit implemented, this did not go without difficulty, and took some time to figure out which order the chips should go in. In the end I settled for the 74HC04 on the left, 74HC00 in the centre and 74HC02 on the right hand side of the cluster with the reasoning behind this being that the most inversions occur with the 74HC00 chip, so keeping these wire distances would be beneficial, though when writing this post I have come to notice that space and ICs could be saved by using the 74HC02 to invert the few relevant inputs rather than using the 74HC04 as a dedicated chip for this. Anyways, the resulting circuit looked like this:
![fba](/assets/imgs/8-bit-cpu/full-binary-adder-hardware-logic-carry.png)

For this image the test test inputs and outputs were connected. In the bottom left are two inputs from A and B, currently connected from switches, while in the top right are the two LEDs with red being the sum ouput and yellow being the carry output. On the right hand side in the centre is a button, which is simply used to generate a clock signal for the D-type latch to perform sequential logic. As luck would have it, this did not work the first time around, and I resorted to using an LED to perform testing on outputs from the gates and made a mistake. This LED was still from the previous circuit and did not feature a current limiting resistor since these chips do not have a high output current, but in retrospect one should have been added since I went in probing with this LED and must have brushed against Vcc accidentally, resulting in the LED exploding and releasing a small amount of smoke. Needless to say I noticed the error in my way immediately. Nonetheless, spotting the error in my way, I found the logic error and carrired onto the last stage of the design, the function select.

Implementing the function select was not too difficult, especially after the lessons I had learned implementing the two previous clusters of logic. At this point I also remembered that a nor gate can be used to invert so there was no need for a chip with inverters, but also though that redoing the circuitry for the logic and carry select cluster would take more time than necessary. In the end the circuit looked like this:
![fba](/assets/imgs/8-bit-cpu/full-binary-adder-hardware-final.png)

In the end we are left with a single output shown by the yellow LED which we can switch by moving the white wires at the bottom of the circuit between the GND and Vcc rail.

### Closing thoughts
After going through all this, I can safely say I understand why any circuit design being done by hand using the 74HC series ICs is an absolutely terrible idea in industry and why it is no longer done, although for a smaller home project like this it is still fun. Experimenting with this has also increased my respect for computer engineers of decades ago, where single logic cards were still used and everything had to be physically wired together before the advent of the PCB.

So whats next? For now I have to finish reading up on VHDL from the great book [Free Range VHDL](https://github.com/fabriziotappero/Free-Range-VHDL-book) and look into implementing this circuit, which I do already have some ideas about. Afterwards possibly also look into cleaning up the spaghetti that the breadboard has become, with inspiration for the cable management coming from [Ben Eater](https://eater.net/).